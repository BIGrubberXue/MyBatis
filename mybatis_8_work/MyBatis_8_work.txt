
1.获得sqlsessionfactory对象
    解析文件的每一个信息保存的Configuration中,返回包括Configuration的DefaultSqlsession
    注意: MappedStatement 代表一个增删改查的详细信息

-----------------------------------------------------------------------------------------------------------------
2.获取sqlsession对象
    返回一个DefaultSqlsession对象，包含Executor和Configuration
    这一步会创建Exectuor对象

-----------------------------------------------------------------------------------------------------------------

3. 获取接口的代理对象( MapperProxy)
    getMapper 使用MapperProxyFaactory创建一个MapperProxy的代理对象
    代理对象里面包含，DefaultSqlsession(Executor)

-----------------------------------------------------------------------------------------------------------------

4.执行增删改查的方法 
    总结：
        1.根据配置文件(全局,sql映射) 初始化Configuration对象
        2.创建一个DefaultSqlsession对象，里面包含Configuration以及Excutor (根据全局配置文件中的defaultExecutorType创建出对应的Executor)
        3.DefaultSqlsession.getmapper() ,拿到对应的MapperProxy
        4.MapperProxy里面有(DefaultSqlsession)
        5.执行增删改查方法
            1)调用DefaultSqlsession的增删改查(Executor)
            2)会创建一个StatementHandler对象(也会同时创建出ParameterHandler和ResultSetHandler)
            3)调用StatementHandler的预编译参数以及设置参数值
            4)调用statementHandler的增删改查方法
            5)ResultHandler封装结果
            注意:四大对象每个创建都有一个interceptorChain.pluginAll(parameterHanler)\

-----------------------------------------------------------------------------------------------------------------


在四大对象创建的时候
1.每个创建出来的对象不是直接返回的，而是
    interceptorChain.pluginAll(parameterHandler)
2.获取带所有的Interceptor(拦截器) ( 插件需要实现的接口)
    调用Interceptor.plugin(target) 返回target包装后的对象
3.插件机制，我们可以使用插件为目标对象创建一个代理对象:AOP(面向切面)
    我们的插件可以为四大对象创建出代理对象
    代理对象就可以拦截到四大对象的每一个执行
------------------------------------------------------------------------------
    public Object pluginAll(Object target){
        for(Interceptor interceptor : interceptors){
            target = interceptor.plugin(target);
        }
        return target;
    }